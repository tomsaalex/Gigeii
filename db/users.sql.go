// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
insert into users
(email, username, pass_hash, pass_salt, role)
values
($1, $2, $3, $4, $5)
RETURNING id, email, username, pass_hash, pass_salt, role
`

type AddUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	PassHash []byte `json:"pass_hash"`
	PassSalt []byte `json:"pass_salt"`
	Role     string `json:"role"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.Email,
		arg.Username,
		arg.PassHash,
		arg.PassSalt,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PassHash,
		&i.PassSalt,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, username, pass_hash, pass_salt, role from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PassHash,
		&i.PassSalt,
		&i.Role,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, email, username, pass_hash, pass_salt, role from users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PassHash,
		&i.PassSalt,
		&i.Role,
	)
	return i, err
}

const selectUsers = `-- name: SelectUsers :many
select id, email, username, pass_hash, pass_salt, role from users
`

func (q *Queries) SelectUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, selectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PassHash,
			&i.PassSalt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
