// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: availabilities.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAvailability = `-- name: CreateAvailability :one
INSERT INTO availabilities (
  product_id, start_date, end_date, availability_type,
  days, hours, price, max_participants, precedance, created_by
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, product_id, start_date, end_date, availability_type, days, hours, price, max_participants, precedance, created_by, created_at, updated_at
`

type CreateAvailabilityParams struct {
	ProductID        pgtype.UUID `json:"product_id"`
	StartDate        pgtype.Date `json:"start_date"`
	EndDate          pgtype.Date `json:"end_date"`
	AvailabilityType string      `json:"availability_type"`
	Days             int32       `json:"days"`
	Hours            int32       `json:"hours"`
	Price            int32       `json:"price"`
	MaxParticipants  int32       `json:"max_participants"`
	Precedance       int32       `json:"precedance"`
	CreatedBy        pgtype.UUID `json:"created_by"`
}

func (q *Queries) CreateAvailability(ctx context.Context, arg CreateAvailabilityParams) (Availability, error) {
	row := q.db.QueryRow(ctx, createAvailability,
		arg.ProductID,
		arg.StartDate,
		arg.EndDate,
		arg.AvailabilityType,
		arg.Days,
		arg.Hours,
		arg.Price,
		arg.MaxParticipants,
		arg.Precedance,
		arg.CreatedBy,
	)
	var i Availability
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.StartDate,
		&i.EndDate,
		&i.AvailabilityType,
		&i.Days,
		&i.Hours,
		&i.Price,
		&i.MaxParticipants,
		&i.Precedance,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAvailabilitiesByProduct = `-- name: GetAvailabilitiesByProduct :many
SELECT id, product_id, start_date, end_date, availability_type, days, hours, price, max_participants, precedance, created_by, created_at, updated_at FROM availabilities
WHERE product_id = $1
ORDER BY precedance DESC, start_date
`

func (q *Queries) GetAvailabilitiesByProduct(ctx context.Context, productID pgtype.UUID) ([]Availability, error) {
	rows, err := q.db.Query(ctx, getAvailabilitiesByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Availability{}
	for rows.Next() {
		var i Availability
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.StartDate,
			&i.EndDate,
			&i.AvailabilityType,
			&i.Days,
			&i.Hours,
			&i.Price,
			&i.MaxParticipants,
			&i.Precedance,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
