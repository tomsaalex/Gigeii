package pages

templ RegisterPage() {
        
        <title>Register</title>
        
        <style>
            body {
                background: linear-gradient(135deg, var(--cs-violet) 0%, var(--cs-light-blue) 100%);
            }
        </style>
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="form-card">
            <h3 class="form-title text-center">Create Account</h3>
            <form
                id="register-form"
                hx-post="/auth/register"
                hx-target-error="#response"
                hx-swap="innerHTML"
                hx-ext="response-targets,form-json"
                class="needs-validation"
                novalidate>
                <div id="response" class="mb-3"></div>

                <div class="mb-3">
                    <label class="form-label">Username</label>
                    <input type="text" name="username" class="form-control" required/>
                    <div class="invalid-feedback">Please enter a valid username.</div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <input type="email" name="email" class="form-control" required/>
                    <div class="invalid-feedback">Please enter a valid email address.</div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <input type="password" name="password" class="form-control" required minlength="6"/>
                    <div class="invalid-feedback">Password must be at least 6 characters long.</div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirm Password</label>
                    <input type="password" name="confirm-password" class="form-control" required minlength="6"/>
                    <div class="invalid-feedback">Passwords do not match.</div>
                </div>

                <button class="btn btn-custom w-100">Register</button>
            </form>

            <div class="mt-3 text-center">
                <a href="/login" class="link-custom">Already have an account? Login</a>
            </div>
        </div>

        <script>
            (function(){
                'use strict';
                let form = document.getElementById('register-form');

                form.addEventListener('submit', function(e) {
                    if (!form.checkValidity()) {
                        e.preventDefault(); e.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);

                form.addEventListener('htmx:beforeSend', function(evt) {
                    const inputs = form.querySelectorAll('input');
                    inputs.forEach(input => {
                        input.classList.remove('is-valid', 'is-invalid');
                        if (input.nextElementSibling) {
                            input.nextElementSibling.textContent = '';
                        }
                    });
                });

                form.addEventListener('htmx:afterSwap', function(evt) {
                    if (evt.detail.target.id === 'response') {
                        const usernameInput = form.querySelector('[name=username]');
                        const emailInput = form.querySelector('[name=email]');
                        const passwordInput = form.querySelector('[name=password]');
                        const confirmPasswordInput = form.querySelector('[name=confirm-password]');

                        if (evt.detail.xhr.status === 400 || evt.detail.xhr.status === 409) {
                            // Example error handling for invalid input or existing user
                            if (evt.detail.xhr.responseText.includes('username')) {
                                usernameInput.classList.add('is-invalid');
                                if (usernameInput.nextElementSibling) {
                                    usernameInput.nextElementSibling.textContent = "Username already taken.";
                                }
                            }
                            if (evt.detail.xhr.responseText.includes('email')) {
                                emailInput.classList.add('is-invalid');
                                if (emailInput.nextElementSibling) {
                                    emailInput.nextElementSibling.textContent = "Email already registered.";
                                }
                            }
                            if (evt.detail.xhr.responseText.includes('password')) {
                                passwordInput.classList.add('is-invalid');
                                confirmPasswordInput.classList.add('is-invalid');
                                if (passwordInput.nextElementSibling) {
                                    passwordInput.nextElementSibling.textContent = "Passwords do not match or are invalid.";
                                }
                            }
                        }

                        const alert = document.querySelector('#response .alert');
                        if (alert) {
                            setTimeout(() => {
                                alert.classList.add('fade');
                                alert.classList.add('show');
                                setTimeout(() => {
                                    alert.remove();
                                }, 1000);
                            }, 3000);
                        }
                    }
                });

                // Custom validation for password confirmation
                const passwordInput = form.querySelector('[name=password]');
                const confirmPasswordInput = form.querySelector('[name=confirm-password]');
                
                confirmPasswordInput.addEventListener('input', function() {
                    if (passwordInput.value !== confirmPasswordInput.value) {
                        confirmPasswordInput.classList.add('is-invalid');
                        if (confirmPasswordInput.nextElementSibling) {
                            confirmPasswordInput.nextElementSibling.textContent = "Passwords do not match.";
                        }
                    } else {
                        confirmPasswordInput.classList.remove('is-invalid');
                        confirmPasswordInput.classList.add('is-valid');
                        if (confirmPasswordInput.nextElementSibling) {
                            confirmPasswordInput.nextElementSibling.textContent = "";
                        }
                    }
                });
            })();
        </script>
    </div>
}