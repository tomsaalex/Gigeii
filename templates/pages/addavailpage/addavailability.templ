package addavailpage

import "fmt"
import "strings"

templ TimeComponent(time string) {
    {{
        idSafeTime := strings.Replace(time, ":", "", -1)
    }}
    <div data-time={time} class="col border rounded time-card">
        <div class="d-flex justify-content-between align-items-center">
            <label class="fs-5" for={"hour-"+idSafeTime}>{ time }</label>
            <button type="button" class="btn-close" aria-label="Remove"
            _="on click
                add .fade-out to closest .time-card
                wait 300ms
                then remove closest .time-card">
            </button>
            <input type="hidden" id={"input-" + idSafeTime} name="times" value={idSafeTime}>
        </div>
    </div>
}

templ AvailabilityAddComponent(vm *ViewModel) {
    <style>
        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            font-family: 'Poppins', sans-serif;
        }
        .form-card {
            border-radius: 15px;
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            background: #ffffff;
            padding: 2rem;
        }
        .form-title {
            color: #333;
            font-weight: 700;
            margin-bottom: 1.5rem;
        }
        .btn-custom {
            --bs-btn-font-weight: 600;
            --bs-btn-color: var(--bs-white);
            --bs-btn-bg: #6a11cb;
            --bs-btn-border-color: #6a11cb;
            --bs-btn-hover-color: var(--bs-white);
            --bs-btn-hover-bg: #520d99;
            --bs-btn-hover-border-color: #520d9c;
            --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
            --bs-btn-active-color: var(--bs-btn-hover-color);
            --bs-btn-active-bg: #39096d;
            --bs-btn-active-border-color: #39096d;
        }
        .btn-outline-custom {
            --bs-btn-font-weight: 600;
            --bs-btn-color: var(--bs-black);
            --bs-btn-border-color: #6a11cb;
            --bs-btn-hover-color: var(--bs-white);
            --bs-btn-hover-bg: #520d9c;
            --bs-btn-hover-border-color: #520d9c;
            --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
            --bs-btn-active-color: var(--bs-white);
            --bs-btn-active-bg: #39096d;
            --bs-btn-active-border-color: #39096d;
        }
        .form-control:focus {
            border-color: #6a11cb;
            box-shadow: 0 0 0 0.2rem rgba(106, 17, 203, 0.25);
        }
        
        
    </style>
    <form 
        id="availability-form" 
        class="mt-4 form-card needs-validation"
        hx-post="/availabilities"
        hx-target-error="#response"
        hx-swap="none"
        hx-ext="form-json,response-targets"
        hx-params="not time-temp"
        novalidate
    >
        <div id="response" class="mb-3"></div>
        <h3 class="form-title text-center">Add Availability</h3>

        <!-- Price -->
        <div class="mb-3">
            <label for="price" class="form-label">Price</label>
            <input type="number" min="0" step="0.01" class="form-control" id="price" name="price" required>
            <div class="invalid-feedback">Please enter a valid price.</div>
        </div>

        <!-- Maximum Occupancy -->
        <div class="mb-3">
            <label for="maxOccupancy" class="form-label">Maximum Occupancy</label>
            <input type="number" min="1" class="form-control" id="maxOccupancy" name="max_occupancy" required>
            <div class="invalid-feedback">Please enter a valid number of people.</div>
        </div>

        <div class="mb-3">
            <label for="" class="form-label">When should the availability apply?</label>
            <select 
            class="form-select" 
            id="type" 
            name="type" 
            autocomplete="off"
            required
            _="on change 
            if my value is 'every_day'
                set #start-date-label's innerText to 'Start Date'
                add @disabled to <#week-day-group input/> then remove @disabled from #end-date
                show #end-date-label then show #end-date then hide #week-day-group
            else if my value is 'fixed_date'
                set #start-date-label's innerText to 'Date'
                add @disabled to <#week-day-group input/> then add @disabled to #end-date
                hide #end-date-label then hide #end-date then hide #week-day-group   
            else if my value is 'select_days'
                set #start-date-label's innerText to 'Start Date'
                remove @disabled from <#week-day-group input/> then remove @disabled from #end-date
                show #end-date-label then show #end-date then show #week-day-group
            end">
                <option value="fixed_date">During a single day</option>
                <option value="every_day" selected>Every day during a date range</option>
                <option value="select_days">During certain days of the week in a date range</option>
            </select>
        </div>

        <!-- Date Range -->
        <div class="row mb-3">
            <div class="col">
                <label for="start-date" id="start-date-label" class="form-label">Start Date</label>
                <input type="date" min={vm.dateToday} class="form-control" id="start-date" name="start_date" required>
                <div class="invalid-feedback">Please enter a valid upcoming date.</div>
            </div>
            <div class="col">
                <label for="end-date" id="end-date-label" class="form-label">End Date</label>
                <input type="date" min={vm.dateToday} class="form-control" id="end-date" name="end_date" required>
                <div class="invalid-feedback">Please enter a valid date after the start date.</div>
            </div>
        </div>

        <!-- Days of the Week -->
        <div id="week-day-group" style="display: none;" class="mb-3 w-100">
            <label class="form-label d-block">Days of the Week</label>
            <div class="btn-group w-100 flex-wrap"  role="group" aria-label="Weekday toggle buttons">
                for i, dayName := range vm.daysOfTheWeek {
                    <input disabled type="checkbox" class="btn-check" id={fmt.Sprintf("day-%d", i)} name="weekdays" value={i} autocomplete="off">
                    <label disabled class="btn btn-custom" for={fmt.Sprintf("day-%d", i)}>{dayName}</label>
                    <div class="invalid-feedback">You must select at least one day.</div>
                }
            </div>

            <div id="weekday-feedback" class="invalid-feedback" style="display: none;">
                Please select at least one day.
            </div>
        </div>

        <div id="time-input-wrapper" class="mb-3">
            <label for="time-input" class="form-label">Add a Time</label>
            <div class="d-flex gap-2">
                <input type="time" name="time-temp" id="time-input" class="form-control" />
                <button
                type="button"
                class="btn btn-primary"
                hx-get="/times"
                hx-include="#time-input"
                hx-target="#time-list"
                hx-swap="beforeend"
                hx-params="*"
                _="on htmx:beforeRequest
                set newTime to #time-input's value
                set existingTimes to #time-list.querySelectorAll('[data-time]')
                for time in existingTimes
                    if time.dataset.time is newTime
                        alert('This time has already been added')
                        call event.preventDefault()
                        exit
                    end
                end">
                Add
                </button>
            </div>

            <label class="form-label d-block">Hours of the Day</label>
            <div class="container px-0">
                <div id="time-list" class="row row-cols-6 g-2">
                    // Time components go here
                </div>
            </div>
        </div>


        <!-- Submit -->
        <button type="submit" class="btn btn-custom w-100">Submit Availability</button>
    </form>
    <script>
        (() => {
            document.addEventListener("htmx:beforeRequest", function (event) {
                const form = event.target.closest("form")
                if (!form || event.target.id != "availability-form") return

                let valid = true

                // Native browser validation
                if (!form.checkValidity()) {
                    valid = false
                }

                // üîç Custom Validation 1: End date after start date
                const start = form.querySelector("#start-date")
                const end = form.querySelector("#end-date")
                if (start && end && !end.disabled) {
                    const startDate = new Date(start.value)
                    const endDate = new Date(end.value)

                    if (start.value && end.value && endDate <= startDate) {
                        valid = false
                        end.setCustomValidity("End date must be after start date.")
                    } else {
                        end.setCustomValidity("") // clear if valid
                    }
                }

                // üîç Custom Validation 2: At least one weekday checked
                const weekdayGroup = form.querySelector("#week-day-group")
                if (weekdayGroup && window.getComputedStyle(weekdayGroup).display !== "none") {
                    const checkboxes = weekdayGroup.querySelectorAll("input[type='checkbox']")
                    const oneChecked = Array.from(checkboxes).some(cb => cb.checked)
                    const feedback = document.getElementById("weekday-feedback")
                    if (!oneChecked) {
                        valid = false
                        feedback.style.display = "block"
                    } else {
                        feedback.style.display = "none"
                    }
                }

                if (!valid) {
                    event.preventDefault()
                    form.classList.add("was-validated")
                }
            })   
        })()
    </script>
}

templ availabilityAddPage(vm *ViewModel) {
    <div class="d-flex justify-content-center align-items-center vh-100">
        @AvailabilityAddComponent(vm)
    </div>
}